/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.objectservice.database.model.tables;


import edu.kit.ipd.crowdcontrol.objectservice.database.model.Crowdcontrol;
import edu.kit.ipd.crowdcontrol.objectservice.database.model.Keys;
import edu.kit.ipd.crowdcontrol.objectservice.database.model.tables.records.ConstraintRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Constraint extends TableImpl<ConstraintRecord> {

	private static final long serialVersionUID = -546446852;

	/**
	 * The reference instance of <code>crowdcontrol.Constraint</code>
	 */
	public static final Constraint CONSTRAINT = new Constraint();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ConstraintRecord> getRecordType() {
		return ConstraintRecord.class;
	}

	/**
	 * The column <code>crowdcontrol.Constraint.id_constraint</code>.
	 */
	public final TableField<ConstraintRecord, Integer> ID_CONSTRAINT = createField("id_constraint", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Constraint.constraint</code>.
	 */
	public final TableField<ConstraintRecord, String> CONSTRAINT_ = createField("constraint", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Constraint.experiment</code>.
	 */
	public final TableField<ConstraintRecord, Integer> EXPERIMENT = createField("experiment", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>crowdcontrol.Constraint</code> table reference
	 */
	public Constraint() {
		this("Constraint", null);
	}

	/**
	 * Create an aliased <code>crowdcontrol.Constraint</code> table reference
	 */
	public Constraint(String alias) {
		this(alias, CONSTRAINT);
	}

	private Constraint(String alias, Table<ConstraintRecord> aliased) {
		this(alias, aliased, null);
	}

	private Constraint(String alias, Table<ConstraintRecord> aliased, Field<?>[] parameters) {
		super(alias, Crowdcontrol.CROWDCONTROL, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ConstraintRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CONSTRAINT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ConstraintRecord> getPrimaryKey() {
		return Keys.KEY_CONSTRAINT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ConstraintRecord>> getKeys() {
		return Arrays.<UniqueKey<ConstraintRecord>>asList(Keys.KEY_CONSTRAINT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ConstraintRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ConstraintRecord, ?>>asList(Keys.CONSTRAINEDEXPERIMENT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Constraint as(String alias) {
		return new Constraint(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Constraint rename(String name) {
		return new Constraint(name, null);
	}
}
