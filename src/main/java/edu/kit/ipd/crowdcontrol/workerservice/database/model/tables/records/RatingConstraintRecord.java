/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.objectservice.database.model.tables.records;


import edu.kit.ipd.crowdcontrol.objectservice.database.model.tables.RatingConstraint;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RatingConstraintRecord extends UpdatableRecordImpl<RatingConstraintRecord> implements Record3<Integer, Integer, Integer> {

	private static final long serialVersionUID = -1417772558;

	/**
	 * Setter for <code>crowdcontrol.Rating_Constraint.id_rating_Constraints</code>.
	 */
	public void setIdRatingConstraints(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>crowdcontrol.Rating_Constraint.id_rating_Constraints</code>.
	 */
	public Integer getIdRatingConstraints() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>crowdcontrol.Rating_Constraint.ref_rating</code>.
	 */
	public void setRefRating(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>crowdcontrol.Rating_Constraint.ref_rating</code>.
	 */
	public Integer getRefRating() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>crowdcontrol.Rating_Constraint.off_constraint</code>.
	 */
	public void setOffConstraint(Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>crowdcontrol.Rating_Constraint.off_constraint</code>.
	 */
	public Integer getOffConstraint() {
		return (Integer) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, Integer> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, Integer> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return RatingConstraint.RATING_CONSTRAINT.ID_RATING_CONSTRAINTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return RatingConstraint.RATING_CONSTRAINT.REF_RATING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return RatingConstraint.RATING_CONSTRAINT.OFF_CONSTRAINT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getIdRatingConstraints();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getRefRating();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getOffConstraint();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RatingConstraintRecord value1(Integer value) {
		setIdRatingConstraints(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RatingConstraintRecord value2(Integer value) {
		setRefRating(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RatingConstraintRecord value3(Integer value) {
		setOffConstraint(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RatingConstraintRecord values(Integer value1, Integer value2, Integer value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached RatingConstraintRecord
	 */
	public RatingConstraintRecord() {
		super(RatingConstraint.RATING_CONSTRAINT);
	}

	/**
	 * Create a detached, initialised RatingConstraintRecord
	 */
	public RatingConstraintRecord(Integer idRatingConstraints, Integer refRating, Integer offConstraint) {
		super(RatingConstraint.RATING_CONSTRAINT);

		setValue(0, idRatingConstraints);
		setValue(1, refRating);
		setValue(2, offConstraint);
	}
}
