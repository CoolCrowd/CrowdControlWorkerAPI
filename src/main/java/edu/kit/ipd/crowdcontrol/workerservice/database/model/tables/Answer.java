/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.objectservice.database.model.tables;


import edu.kit.ipd.crowdcontrol.objectservice.database.model.Crowdcontrol;
import edu.kit.ipd.crowdcontrol.objectservice.database.model.Keys;
import edu.kit.ipd.crowdcontrol.objectservice.database.model.tables.records.AnswerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answer extends TableImpl<AnswerRecord> {

	private static final long serialVersionUID = 2122735924;

	/**
	 * The reference instance of <code>crowdcontrol.Answer</code>
	 */
	public static final Answer ANSWER = new Answer();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AnswerRecord> getRecordType() {
		return AnswerRecord.class;
	}

	/**
	 * The column <code>crowdcontrol.Answer.id_answer</code>.
	 */
	public final TableField<AnswerRecord, Integer> ID_ANSWER = createField("id_answer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.experiment</code>.
	 */
	public final TableField<AnswerRecord, Integer> EXPERIMENT = createField("experiment", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.answer</code>.
	 */
	public final TableField<AnswerRecord, String> ANSWER_ = createField("answer", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.timestamp</code>.
	 */
	public final TableField<AnswerRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.worker_id</code>.
	 */
	public final TableField<AnswerRecord, Integer> WORKER_ID = createField("worker_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.reservation</code>.
	 */
	public final TableField<AnswerRecord, Integer> RESERVATION = createField("reservation", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.quality</code>.
	 */
	public final TableField<AnswerRecord, Integer> QUALITY = createField("quality", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Answer.quality_assured</code>.
	 */
	public final TableField<AnswerRecord, Boolean> QUALITY_ASSURED = createField("quality_assured", org.jooq.impl.SQLDataType.BIT, this, "");

	/**
	 * The column <code>crowdcontrol.Answer.system_response</code>.
	 */
	public final TableField<AnswerRecord, String> SYSTEM_RESPONSE = createField("system_response", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Answer.hash</code>.
	 */
	public final TableField<AnswerRecord, Long> HASH = createField("hash", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>crowdcontrol.Answer</code> table reference
	 */
	public Answer() {
		this("Answer", null);
	}

	/**
	 * Create an aliased <code>crowdcontrol.Answer</code> table reference
	 */
	public Answer(String alias) {
		this(alias, ANSWER);
	}

	private Answer(String alias, Table<AnswerRecord> aliased) {
		this(alias, aliased, null);
	}

	private Answer(String alias, Table<AnswerRecord> aliased, Field<?>[] parameters) {
		super(alias, Crowdcontrol.CROWDCONTROL, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AnswerRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ANSWER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AnswerRecord> getPrimaryKey() {
		return Keys.KEY_ANSWER_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AnswerRecord>> getKeys() {
		return Arrays.<UniqueKey<AnswerRecord>>asList(Keys.KEY_ANSWER_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AnswerRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AnswerRecord, ?>>asList(Keys.IDEXPERIMENTANSWERS, Keys.WORKERANSWERED, Keys.RESERVATION_ANSWER);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Answer as(String alias) {
		return new Answer(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Answer rename(String name) {
		return new Answer(name, null);
	}
}
