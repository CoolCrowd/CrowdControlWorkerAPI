/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.workerservice.database.model.tables;


import edu.kit.ipd.crowdcontrol.workerservice.database.model.Crowdcontrol;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.RatingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rating extends TableImpl<RatingRecord> {

	private static final long serialVersionUID = -312716355;

	/**
	 * The reference instance of <code>crowdcontrol.Rating</code>
	 */
	public static final Rating RATING = new Rating();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RatingRecord> getRecordType() {
		return RatingRecord.class;
	}

	/**
	 * The column <code>crowdcontrol.Rating.id_rating</code>.
	 */
	public final TableField<RatingRecord, Integer> ID_RATING = createField("id_rating", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.experiment</code>.
	 */
	public final TableField<RatingRecord, Integer> EXPERIMENT = createField("experiment", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.answer_r</code>.
	 */
	public final TableField<RatingRecord, Integer> ANSWER_R = createField("answer_r", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.timestamp</code>.
	 */
	public final TableField<RatingRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.rating</code>.
	 */
	public final TableField<RatingRecord, Integer> RATING_ = createField("rating", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.reservation</code>.
	 */
	public final TableField<RatingRecord, Integer> RESERVATION = createField("reservation", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.feedback</code>.
	 */
	public final TableField<RatingRecord, String> FEEDBACK = createField("feedback", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>crowdcontrol.Rating.worker_id</code>.
	 */
	public final TableField<RatingRecord, Integer> WORKER_ID = createField("worker_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Rating.quality</code>.
	 */
	public final TableField<RatingRecord, Integer> QUALITY = createField("quality", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>crowdcontrol.Rating</code> table reference
	 */
	public Rating() {
		this("Rating", null);
	}

	/**
	 * Create an aliased <code>crowdcontrol.Rating</code> table reference
	 */
	public Rating(String alias) {
		this(alias, RATING);
	}

	private Rating(String alias, Table<RatingRecord> aliased) {
		this(alias, aliased, null);
	}

	private Rating(String alias, Table<RatingRecord> aliased, Field<?>[] parameters) {
		super(alias, Crowdcontrol.CROWDCONTROL, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<RatingRecord, Integer> getIdentity() {
		return Keys.IDENTITY_RATING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RatingRecord> getPrimaryKey() {
		return Keys.KEY_RATING_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RatingRecord>> getKeys() {
		return Arrays.<UniqueKey<RatingRecord>>asList(Keys.KEY_RATING_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<RatingRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<RatingRecord, ?>>asList(Keys.IDEXPERIMENTRATING, Keys.IDANSWERSRATINGS, Keys.RESERVATION_RATING, Keys.WORKERRATED);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Rating as(String alias) {
		return new Rating(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Rating rename(String name) {
		return new Rating(name, null);
	}
}
