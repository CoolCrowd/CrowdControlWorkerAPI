/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.workerservice.database.model;


import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AlgorithmAnswerQuality;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AlgorithmAnswerQualityParam;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AlgorithmRatingQuality;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AlgorithmRatingQualityParam;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AlgorithmTaskChooser;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AlgorithmTaskChooserParam;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Answer;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.AnswerReservation;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Calibration;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.CalibrationAnswerOption;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.CalibrationResult;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ChosenAnswerQualityParam;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ChosenRatingQualityParam;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ChosenTaskChooserParam;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Constraint;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.DatabaseVersion;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Experiment;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ExperimentsCalibration;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ExperimentsPlatform;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ExperimentsPlatformMode;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.ExperimentsPlatformStatus;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.GiftCode;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Notification;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.NotificationReceiverEmail;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.NotificationToken;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Platform;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Rating;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.RatingConstraint;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.RatingOptionExperiment;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.RatingOptionTemplate;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.RatingReservation;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Tag;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Template;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.TemplateConstraint;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.TemplateTag;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.Worker;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.WorkerBalance;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.WorkerToken;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AlgorithmAnswerQualityParamRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AlgorithmAnswerQualityRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AlgorithmRatingQualityParamRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AlgorithmRatingQualityRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AlgorithmTaskChooserParamRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AlgorithmTaskChooserRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AnswerRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.AnswerReservationRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.CalibrationAnswerOptionRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.CalibrationRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.CalibrationResultRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ChosenAnswerQualityParamRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ChosenRatingQualityParamRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ChosenTaskChooserParamRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ConstraintRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.DatabaseVersionRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ExperimentRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ExperimentsCalibrationRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ExperimentsPlatformModeRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ExperimentsPlatformRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ExperimentsPlatformStatusRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.GiftCodeRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.NotificationReceiverEmailRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.NotificationRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.NotificationTokenRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.PlatformRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.RatingConstraintRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.RatingOptionExperimentRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.RatingOptionTemplateRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.RatingRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.RatingReservationRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.TagRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.TemplateConstraintRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.TemplateRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.TemplateTagRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.WorkerBalanceRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.WorkerRecord;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.WorkerTokenRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>crowdcontrol</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<AlgorithmAnswerQualityParamRecord, Integer> IDENTITY_ALGORITHM_ANSWER_QUALITY_PARAM = Identities0.IDENTITY_ALGORITHM_ANSWER_QUALITY_PARAM;
	public static final Identity<AlgorithmRatingQualityParamRecord, Integer> IDENTITY_ALGORITHM_RATING_QUALITY_PARAM = Identities0.IDENTITY_ALGORITHM_RATING_QUALITY_PARAM;
	public static final Identity<AlgorithmTaskChooserParamRecord, Integer> IDENTITY_ALGORITHM_TASK_CHOOSER_PARAM = Identities0.IDENTITY_ALGORITHM_TASK_CHOOSER_PARAM;
	public static final Identity<AnswerRecord, Integer> IDENTITY_ANSWER = Identities0.IDENTITY_ANSWER;
	public static final Identity<CalibrationRecord, Integer> IDENTITY_CALIBRATION = Identities0.IDENTITY_CALIBRATION;
	public static final Identity<CalibrationAnswerOptionRecord, Integer> IDENTITY_CALIBRATION_ANSWER_OPTION = Identities0.IDENTITY_CALIBRATION_ANSWER_OPTION;
	public static final Identity<CalibrationResultRecord, Integer> IDENTITY_CALIBRATION_RESULT = Identities0.IDENTITY_CALIBRATION_RESULT;
	public static final Identity<ChosenAnswerQualityParamRecord, Integer> IDENTITY_CHOSEN_ANSWER_QUALITY_PARAM = Identities0.IDENTITY_CHOSEN_ANSWER_QUALITY_PARAM;
	public static final Identity<ChosenRatingQualityParamRecord, Integer> IDENTITY_CHOSEN_RATING_QUALITY_PARAM = Identities0.IDENTITY_CHOSEN_RATING_QUALITY_PARAM;
	public static final Identity<ChosenTaskChooserParamRecord, Integer> IDENTITY_CHOSEN_TASK_CHOOSER_PARAM = Identities0.IDENTITY_CHOSEN_TASK_CHOOSER_PARAM;
	public static final Identity<ConstraintRecord, Integer> IDENTITY_CONSTRAINT = Identities0.IDENTITY_CONSTRAINT;
	public static final Identity<DatabaseVersionRecord, Integer> IDENTITY_DATABASE_VERSION = Identities0.IDENTITY_DATABASE_VERSION;
	public static final Identity<ExperimentRecord, Integer> IDENTITY_EXPERIMENT = Identities0.IDENTITY_EXPERIMENT;
	public static final Identity<ExperimentsCalibrationRecord, Integer> IDENTITY_EXPERIMENTS_CALIBRATION = Identities0.IDENTITY_EXPERIMENTS_CALIBRATION;
	public static final Identity<ExperimentsPlatformRecord, Integer> IDENTITY_EXPERIMENTS_PLATFORM = Identities0.IDENTITY_EXPERIMENTS_PLATFORM;
	public static final Identity<ExperimentsPlatformModeRecord, Integer> IDENTITY_EXPERIMENTS_PLATFORM_MODE = Identities0.IDENTITY_EXPERIMENTS_PLATFORM_MODE;
	public static final Identity<ExperimentsPlatformStatusRecord, Integer> IDENTITY_EXPERIMENTS_PLATFORM_STATUS = Identities0.IDENTITY_EXPERIMENTS_PLATFORM_STATUS;
	public static final Identity<GiftCodeRecord, Integer> IDENTITY_GIFT_CODE = Identities0.IDENTITY_GIFT_CODE;
	public static final Identity<NotificationRecord, Integer> IDENTITY_NOTIFICATION = Identities0.IDENTITY_NOTIFICATION;
	public static final Identity<NotificationReceiverEmailRecord, Integer> IDENTITY_NOTIFICATION_RECEIVER_EMAIL = Identities0.IDENTITY_NOTIFICATION_RECEIVER_EMAIL;
	public static final Identity<NotificationTokenRecord, Integer> IDENTITY_NOTIFICATION_TOKEN = Identities0.IDENTITY_NOTIFICATION_TOKEN;
	public static final Identity<RatingRecord, Integer> IDENTITY_RATING = Identities0.IDENTITY_RATING;
	public static final Identity<RatingConstraintRecord, Integer> IDENTITY_RATING_CONSTRAINT = Identities0.IDENTITY_RATING_CONSTRAINT;
	public static final Identity<RatingOptionExperimentRecord, Integer> IDENTITY_RATING_OPTION_EXPERIMENT = Identities0.IDENTITY_RATING_OPTION_EXPERIMENT;
	public static final Identity<RatingOptionTemplateRecord, Integer> IDENTITY_RATING_OPTION_TEMPLATE = Identities0.IDENTITY_RATING_OPTION_TEMPLATE;
	public static final Identity<TagRecord, Integer> IDENTITY_TAG = Identities0.IDENTITY_TAG;
	public static final Identity<TemplateRecord, Integer> IDENTITY_TEMPLATE = Identities0.IDENTITY_TEMPLATE;
	public static final Identity<TemplateConstraintRecord, Integer> IDENTITY_TEMPLATE_CONSTRAINT = Identities0.IDENTITY_TEMPLATE_CONSTRAINT;
	public static final Identity<TemplateTagRecord, Integer> IDENTITY_TEMPLATE_TAG = Identities0.IDENTITY_TEMPLATE_TAG;
	public static final Identity<WorkerRecord, Integer> IDENTITY_WORKER = Identities0.IDENTITY_WORKER;
	public static final Identity<WorkerBalanceRecord, Integer> IDENTITY_WORKER_BALANCE = Identities0.IDENTITY_WORKER_BALANCE;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AlgorithmAnswerQualityRecord> KEY_ALGORITHM_ANSWER_QUALITY_PRIMARY = UniqueKeys0.KEY_ALGORITHM_ANSWER_QUALITY_PRIMARY;
	public static final UniqueKey<AlgorithmAnswerQualityParamRecord> KEY_ALGORITHM_ANSWER_QUALITY_PARAM_PRIMARY = UniqueKeys0.KEY_ALGORITHM_ANSWER_QUALITY_PARAM_PRIMARY;
	public static final UniqueKey<AlgorithmRatingQualityRecord> KEY_ALGORITHM_RATING_QUALITY_PRIMARY = UniqueKeys0.KEY_ALGORITHM_RATING_QUALITY_PRIMARY;
	public static final UniqueKey<AlgorithmRatingQualityParamRecord> KEY_ALGORITHM_RATING_QUALITY_PARAM_PRIMARY = UniqueKeys0.KEY_ALGORITHM_RATING_QUALITY_PARAM_PRIMARY;
	public static final UniqueKey<AlgorithmTaskChooserRecord> KEY_ALGORITHM_TASK_CHOOSER_PRIMARY = UniqueKeys0.KEY_ALGORITHM_TASK_CHOOSER_PRIMARY;
	public static final UniqueKey<AlgorithmTaskChooserParamRecord> KEY_ALGORITHM_TASK_CHOOSER_PARAM_PRIMARY = UniqueKeys0.KEY_ALGORITHM_TASK_CHOOSER_PARAM_PRIMARY;
	public static final UniqueKey<AnswerRecord> KEY_ANSWER_PRIMARY = UniqueKeys0.KEY_ANSWER_PRIMARY;
	public static final UniqueKey<AnswerReservationRecord> KEY_ANSWER_RESERVATION_PRIMARY = UniqueKeys0.KEY_ANSWER_RESERVATION_PRIMARY;
	public static final UniqueKey<CalibrationRecord> KEY_CALIBRATION_PRIMARY = UniqueKeys0.KEY_CALIBRATION_PRIMARY;
	public static final UniqueKey<CalibrationRecord> KEY_CALIBRATION_EXPERIMENT_UNIQUE = UniqueKeys0.KEY_CALIBRATION_EXPERIMENT_UNIQUE;
	public static final UniqueKey<CalibrationAnswerOptionRecord> KEY_CALIBRATION_ANSWER_OPTION_PRIMARY = UniqueKeys0.KEY_CALIBRATION_ANSWER_OPTION_PRIMARY;
	public static final UniqueKey<CalibrationResultRecord> KEY_CALIBRATION_RESULT_PRIMARY = UniqueKeys0.KEY_CALIBRATION_RESULT_PRIMARY;
	public static final UniqueKey<ChosenAnswerQualityParamRecord> KEY_CHOSEN_ANSWER_QUALITY_PARAM_PRIMARY = UniqueKeys0.KEY_CHOSEN_ANSWER_QUALITY_PARAM_PRIMARY;
	public static final UniqueKey<ChosenRatingQualityParamRecord> KEY_CHOSEN_RATING_QUALITY_PARAM_PRIMARY = UniqueKeys0.KEY_CHOSEN_RATING_QUALITY_PARAM_PRIMARY;
	public static final UniqueKey<ChosenTaskChooserParamRecord> KEY_CHOSEN_TASK_CHOOSER_PARAM_PRIMARY = UniqueKeys0.KEY_CHOSEN_TASK_CHOOSER_PARAM_PRIMARY;
	public static final UniqueKey<ConstraintRecord> KEY_CONSTRAINT_PRIMARY = UniqueKeys0.KEY_CONSTRAINT_PRIMARY;
	public static final UniqueKey<DatabaseVersionRecord> KEY_DATABASE_VERSION_PRIMARY = UniqueKeys0.KEY_DATABASE_VERSION_PRIMARY;
	public static final UniqueKey<ExperimentRecord> KEY_EXPERIMENT_PRIMARY = UniqueKeys0.KEY_EXPERIMENT_PRIMARY;
	public static final UniqueKey<ExperimentsCalibrationRecord> KEY_EXPERIMENTS_CALIBRATION_PRIMARY = UniqueKeys0.KEY_EXPERIMENTS_CALIBRATION_PRIMARY;
	public static final UniqueKey<ExperimentsPlatformRecord> KEY_EXPERIMENTS_PLATFORM_PRIMARY = UniqueKeys0.KEY_EXPERIMENTS_PLATFORM_PRIMARY;
	public static final UniqueKey<ExperimentsPlatformModeRecord> KEY_EXPERIMENTS_PLATFORM_MODE_PRIMARY = UniqueKeys0.KEY_EXPERIMENTS_PLATFORM_MODE_PRIMARY;
	public static final UniqueKey<ExperimentsPlatformStatusRecord> KEY_EXPERIMENTS_PLATFORM_STATUS_PRIMARY = UniqueKeys0.KEY_EXPERIMENTS_PLATFORM_STATUS_PRIMARY;
	public static final UniqueKey<GiftCodeRecord> KEY_GIFT_CODE_PRIMARY = UniqueKeys0.KEY_GIFT_CODE_PRIMARY;
	public static final UniqueKey<NotificationRecord> KEY_NOTIFICATION_PRIMARY = UniqueKeys0.KEY_NOTIFICATION_PRIMARY;
	public static final UniqueKey<NotificationReceiverEmailRecord> KEY_NOTIFICATION_RECEIVER_EMAIL_PRIMARY = UniqueKeys0.KEY_NOTIFICATION_RECEIVER_EMAIL_PRIMARY;
	public static final UniqueKey<NotificationTokenRecord> KEY_NOTIFICATION_TOKEN_PRIMARY = UniqueKeys0.KEY_NOTIFICATION_TOKEN_PRIMARY;
	public static final UniqueKey<PlatformRecord> KEY_PLATFORM_PRIMARY = UniqueKeys0.KEY_PLATFORM_PRIMARY;
	public static final UniqueKey<RatingRecord> KEY_RATING_PRIMARY = UniqueKeys0.KEY_RATING_PRIMARY;
	public static final UniqueKey<RatingConstraintRecord> KEY_RATING_CONSTRAINT_PRIMARY = UniqueKeys0.KEY_RATING_CONSTRAINT_PRIMARY;
	public static final UniqueKey<RatingOptionExperimentRecord> KEY_RATING_OPTION_EXPERIMENT_PRIMARY = UniqueKeys0.KEY_RATING_OPTION_EXPERIMENT_PRIMARY;
	public static final UniqueKey<RatingOptionTemplateRecord> KEY_RATING_OPTION_TEMPLATE_PRIMARY = UniqueKeys0.KEY_RATING_OPTION_TEMPLATE_PRIMARY;
	public static final UniqueKey<RatingReservationRecord> KEY_RATING_RESERVATION_PRIMARY = UniqueKeys0.KEY_RATING_RESERVATION_PRIMARY;
	public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = UniqueKeys0.KEY_TAG_PRIMARY;
	public static final UniqueKey<TemplateRecord> KEY_TEMPLATE_PRIMARY = UniqueKeys0.KEY_TEMPLATE_PRIMARY;
	public static final UniqueKey<TemplateConstraintRecord> KEY_TEMPLATE_CONSTRAINT_PRIMARY = UniqueKeys0.KEY_TEMPLATE_CONSTRAINT_PRIMARY;
	public static final UniqueKey<TemplateTagRecord> KEY_TEMPLATE_TAG_PRIMARY = UniqueKeys0.KEY_TEMPLATE_TAG_PRIMARY;
	public static final UniqueKey<WorkerRecord> KEY_WORKER_PRIMARY = UniqueKeys0.KEY_WORKER_PRIMARY;
	public static final UniqueKey<WorkerBalanceRecord> KEY_WORKER_BALANCE_PRIMARY = UniqueKeys0.KEY_WORKER_BALANCE_PRIMARY;
	public static final UniqueKey<WorkerTokenRecord> KEY_WORKER_TOKEN_PRIMARY = UniqueKeys0.KEY_WORKER_TOKEN_PRIMARY;
	public static final UniqueKey<WorkerTokenRecord> KEY_WORKER_TOKEN_TOKEN_UNIQUE = UniqueKeys0.KEY_WORKER_TOKEN_TOKEN_UNIQUE;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<AlgorithmAnswerQualityParamRecord, AlgorithmAnswerQualityRecord> REFERENCEDANSWERQUALITY = ForeignKeys0.REFERENCEDANSWERQUALITY;
	public static final ForeignKey<AlgorithmRatingQualityParamRecord, AlgorithmRatingQualityRecord> REGERENCEDRATINQUALITY = ForeignKeys0.REGERENCEDRATINQUALITY;
	public static final ForeignKey<AlgorithmTaskChooserParamRecord, AlgorithmTaskChooserRecord> REFERENCEDTASKCHOOSER = ForeignKeys0.REFERENCEDTASKCHOOSER;
	public static final ForeignKey<AnswerRecord, ExperimentRecord> IDEXPERIMENTANSWERS = ForeignKeys0.IDEXPERIMENTANSWERS;
	public static final ForeignKey<AnswerRecord, WorkerRecord> WORKERANSWERED = ForeignKeys0.WORKERANSWERED;
	public static final ForeignKey<AnswerRecord, AnswerReservationRecord> RESERVATION_ANSWER = ForeignKeys0.RESERVATION_ANSWER;
	public static final ForeignKey<AnswerReservationRecord, WorkerRecord> WORKER_WIL_ANSWER = ForeignKeys0.WORKER_WIL_ANSWER;
	public static final ForeignKey<AnswerReservationRecord, ExperimentRecord> EXPERIMENT_WILL_BE_ANSWERED = ForeignKeys0.EXPERIMENT_WILL_BE_ANSWERED;
	public static final ForeignKey<CalibrationRecord, ExperimentRecord> PARTICIPATEDIN = ForeignKeys0.PARTICIPATEDIN;
	public static final ForeignKey<CalibrationAnswerOptionRecord, CalibrationRecord> CALIBRATIONANSWER = ForeignKeys0.CALIBRATIONANSWER;
	public static final ForeignKey<CalibrationResultRecord, WorkerRecord> REFERENCEDWORKER = ForeignKeys0.REFERENCEDWORKER;
	public static final ForeignKey<CalibrationResultRecord, CalibrationAnswerOptionRecord> CHOSENANSWER = ForeignKeys0.CHOSENANSWER;
	public static final ForeignKey<ChosenAnswerQualityParamRecord, ExperimentRecord> ANSWERQUALITYPARAMREFEXPERIMENT = ForeignKeys0.ANSWERQUALITYPARAMREFEXPERIMENT;
	public static final ForeignKey<ChosenAnswerQualityParamRecord, AlgorithmAnswerQualityParamRecord> CHOSENANSWERQUALITYPARAM = ForeignKeys0.CHOSENANSWERQUALITYPARAM;
	public static final ForeignKey<ChosenRatingQualityParamRecord, ExperimentRecord> CHOSENRATINGQUALITYPARAMREFEXPERIMENT = ForeignKeys0.CHOSENRATINGQUALITYPARAMREFEXPERIMENT;
	public static final ForeignKey<ChosenRatingQualityParamRecord, AlgorithmRatingQualityParamRecord> CHOSENRATINGQUALITYPARAM = ForeignKeys0.CHOSENRATINGQUALITYPARAM;
	public static final ForeignKey<ChosenTaskChooserParamRecord, ExperimentRecord> TASKCHOOSERPARAMREFEXPERIMENT = ForeignKeys0.TASKCHOOSERPARAMREFEXPERIMENT;
	public static final ForeignKey<ChosenTaskChooserParamRecord, AlgorithmTaskChooserParamRecord> CHOOSENTASKCHOOSERPARAM = ForeignKeys0.CHOOSENTASKCHOOSERPARAM;
	public static final ForeignKey<ConstraintRecord, ExperimentRecord> CONSTRAINEDEXPERIMENT = ForeignKeys0.CONSTRAINEDEXPERIMENT;
	public static final ForeignKey<ExperimentRecord, AlgorithmTaskChooserRecord> USEDTASKCHOOSER = ForeignKeys0.USEDTASKCHOOSER;
	public static final ForeignKey<ExperimentRecord, AlgorithmAnswerQualityRecord> USEDANSWERQUALITY = ForeignKeys0.USEDANSWERQUALITY;
	public static final ForeignKey<ExperimentRecord, AlgorithmRatingQualityRecord> USEDRATINGQUALITY = ForeignKeys0.USEDRATINGQUALITY;
	public static final ForeignKey<ExperimentRecord, TemplateRecord> USEDTEMPLATE = ForeignKeys0.USEDTEMPLATE;
	public static final ForeignKey<ExperimentsCalibrationRecord, ExperimentsPlatformRecord> REFERENCED_EXPERIMENTS_PLATFORM = ForeignKeys0.REFERENCED_EXPERIMENTS_PLATFORM;
	public static final ForeignKey<ExperimentsCalibrationRecord, CalibrationAnswerOptionRecord> REFERENCED_ANSWER = ForeignKeys0.REFERENCED_ANSWER;
	public static final ForeignKey<ExperimentsPlatformRecord, ExperimentRecord> PLATFORM_USER = ForeignKeys0.PLATFORM_USER;
	public static final ForeignKey<ExperimentsPlatformRecord, PlatformRecord> ACTIVE_PLATFORM = ForeignKeys0.ACTIVE_PLATFORM;
	public static final ForeignKey<ExperimentsPlatformModeRecord, ExperimentsPlatformRecord> MODE_FOR_PLATFORM = ForeignKeys0.MODE_FOR_PLATFORM;
	public static final ForeignKey<ExperimentsPlatformStatusRecord, ExperimentsPlatformRecord> STATUS_FOR_PLATFORM = ForeignKeys0.STATUS_FOR_PLATFORM;
	public static final ForeignKey<NotificationReceiverEmailRecord, NotificationRecord> REFERENCED_NOTIFICATION = ForeignKeys0.REFERENCED_NOTIFICATION;
	public static final ForeignKey<NotificationTokenRecord, NotificationRecord> BELONGING_NOTIFICATION = ForeignKeys0.BELONGING_NOTIFICATION;
	public static final ForeignKey<RatingRecord, ExperimentRecord> IDEXPERIMENTRATING = ForeignKeys0.IDEXPERIMENTRATING;
	public static final ForeignKey<RatingRecord, AnswerRecord> IDANSWERSRATINGS = ForeignKeys0.IDANSWERSRATINGS;
	public static final ForeignKey<RatingRecord, RatingReservationRecord> RESERVATION_RATING = ForeignKeys0.RESERVATION_RATING;
	public static final ForeignKey<RatingRecord, WorkerRecord> WORKERRATED = ForeignKeys0.WORKERRATED;
	public static final ForeignKey<RatingConstraintRecord, RatingRecord> REFERENCED_RATING = ForeignKeys0.REFERENCED_RATING;
	public static final ForeignKey<RatingConstraintRecord, ConstraintRecord> ROFFENDED_CONSTRAINT = ForeignKeys0.ROFFENDED_CONSTRAINT;
	public static final ForeignKey<RatingOptionExperimentRecord, ExperimentRecord> RATING_OPTIONS_EXPERIMENT_REFERENCE = ForeignKeys0.RATING_OPTIONS_EXPERIMENT_REFERENCE;
	public static final ForeignKey<RatingOptionTemplateRecord, TemplateRecord> REFERENCED_TEMPLATE = ForeignKeys0.REFERENCED_TEMPLATE;
	public static final ForeignKey<RatingReservationRecord, WorkerRecord> WORKER_WILL_RATE = ForeignKeys0.WORKER_WILL_RATE;
	public static final ForeignKey<RatingReservationRecord, ExperimentRecord> EXPERIMENT_WILL_RATED_ON = ForeignKeys0.EXPERIMENT_WILL_RATED_ON;
	public static final ForeignKey<RatingReservationRecord, AnswerRecord> RESERVED_ANSWER = ForeignKeys0.RESERVED_ANSWER;
	public static final ForeignKey<TagRecord, ExperimentRecord> IDEXPERIMENTTAGS = ForeignKeys0.IDEXPERIMENTTAGS;
	public static final ForeignKey<TemplateConstraintRecord, TemplateRecord> CONSTRAINED_TEMPLATE = ForeignKeys0.CONSTRAINED_TEMPLATE;
	public static final ForeignKey<TemplateTagRecord, TemplateRecord> TAGGED_TEMPLATE = ForeignKeys0.TAGGED_TEMPLATE;
	public static final ForeignKey<WorkerRecord, PlatformRecord> WORKERORIGIN = ForeignKeys0.WORKERORIGIN;
	public static final ForeignKey<WorkerBalanceRecord, WorkerRecord> TRANSACTION_PARTNER = ForeignKeys0.TRANSACTION_PARTNER;
	public static final ForeignKey<WorkerBalanceRecord, GiftCodeRecord> USED_GIFT_CODE = ForeignKeys0.USED_GIFT_CODE;
	public static final ForeignKey<WorkerTokenRecord, WorkerRecord> TOKEN_FOR_UD = ForeignKeys0.TOKEN_FOR_UD;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<AlgorithmAnswerQualityParamRecord, Integer> IDENTITY_ALGORITHM_ANSWER_QUALITY_PARAM = createIdentity(AlgorithmAnswerQualityParam.ALGORITHM_ANSWER_QUALITY_PARAM, AlgorithmAnswerQualityParam.ALGORITHM_ANSWER_QUALITY_PARAM.ID_ALGORITHM_ANSWER_QUALITY_PARAM);
		public static Identity<AlgorithmRatingQualityParamRecord, Integer> IDENTITY_ALGORITHM_RATING_QUALITY_PARAM = createIdentity(AlgorithmRatingQualityParam.ALGORITHM_RATING_QUALITY_PARAM, AlgorithmRatingQualityParam.ALGORITHM_RATING_QUALITY_PARAM.ID_ALGORITHM_RATING_QUALITY_PARAM);
		public static Identity<AlgorithmTaskChooserParamRecord, Integer> IDENTITY_ALGORITHM_TASK_CHOOSER_PARAM = createIdentity(AlgorithmTaskChooserParam.ALGORITHM_TASK_CHOOSER_PARAM, AlgorithmTaskChooserParam.ALGORITHM_TASK_CHOOSER_PARAM.ID_ALGORITHM_TASK_CHOOSER_PARAM);
		public static Identity<AnswerRecord, Integer> IDENTITY_ANSWER = createIdentity(Answer.ANSWER, Answer.ANSWER.ID_ANSWER);
		public static Identity<CalibrationRecord, Integer> IDENTITY_CALIBRATION = createIdentity(Calibration.CALIBRATION, Calibration.CALIBRATION.ID_CALIBRATION);
		public static Identity<CalibrationAnswerOptionRecord, Integer> IDENTITY_CALIBRATION_ANSWER_OPTION = createIdentity(CalibrationAnswerOption.CALIBRATION_ANSWER_OPTION, CalibrationAnswerOption.CALIBRATION_ANSWER_OPTION.ID_CALIBRATION_ANSWER_OPTION);
		public static Identity<CalibrationResultRecord, Integer> IDENTITY_CALIBRATION_RESULT = createIdentity(CalibrationResult.CALIBRATION_RESULT, CalibrationResult.CALIBRATION_RESULT.ID_CALIBRATION_RESULT);
		public static Identity<ChosenAnswerQualityParamRecord, Integer> IDENTITY_CHOSEN_ANSWER_QUALITY_PARAM = createIdentity(ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM, ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM.ID_ALGORITHM_ANSWER_QUALITY_PARAM_CHOSEN);
		public static Identity<ChosenRatingQualityParamRecord, Integer> IDENTITY_CHOSEN_RATING_QUALITY_PARAM = createIdentity(ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM, ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM.ID_ALGORITHM_RATING_QUALITY_CHOSEN);
		public static Identity<ChosenTaskChooserParamRecord, Integer> IDENTITY_CHOSEN_TASK_CHOOSER_PARAM = createIdentity(ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM, ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM.ID_CHOOSEN_TASK_CHOOSER_PARAM);
		public static Identity<ConstraintRecord, Integer> IDENTITY_CONSTRAINT = createIdentity(Constraint.CONSTRAINT, Constraint.CONSTRAINT.ID_CONSTRAINT);
		public static Identity<DatabaseVersionRecord, Integer> IDENTITY_DATABASE_VERSION = createIdentity(DatabaseVersion.DATABASE_VERSION, DatabaseVersion.DATABASE_VERSION.IDDATABASE_VERSION);
		public static Identity<ExperimentRecord, Integer> IDENTITY_EXPERIMENT = createIdentity(Experiment.EXPERIMENT, Experiment.EXPERIMENT.ID_EXPERIMENT);
		public static Identity<ExperimentsCalibrationRecord, Integer> IDENTITY_EXPERIMENTS_CALIBRATION = createIdentity(ExperimentsCalibration.EXPERIMENTS_CALIBRATION, ExperimentsCalibration.EXPERIMENTS_CALIBRATION.ID_EXPERIMENTS_CALIBRATION);
		public static Identity<ExperimentsPlatformRecord, Integer> IDENTITY_EXPERIMENTS_PLATFORM = createIdentity(ExperimentsPlatform.EXPERIMENTS_PLATFORM, ExperimentsPlatform.EXPERIMENTS_PLATFORM.IDEXPERIMENTS_PLATFORMS);
		public static Identity<ExperimentsPlatformModeRecord, Integer> IDENTITY_EXPERIMENTS_PLATFORM_MODE = createIdentity(ExperimentsPlatformMode.EXPERIMENTS_PLATFORM_MODE, ExperimentsPlatformMode.EXPERIMENTS_PLATFORM_MODE.IDEXPERIMENTS_PLATFORM_STOPGAP);
		public static Identity<ExperimentsPlatformStatusRecord, Integer> IDENTITY_EXPERIMENTS_PLATFORM_STATUS = createIdentity(ExperimentsPlatformStatus.EXPERIMENTS_PLATFORM_STATUS, ExperimentsPlatformStatus.EXPERIMENTS_PLATFORM_STATUS.IDEXPERIMENTS_PLATFORM_STATUS);
		public static Identity<GiftCodeRecord, Integer> IDENTITY_GIFT_CODE = createIdentity(GiftCode.GIFT_CODE, GiftCode.GIFT_CODE.ID_GIFT_CODE);
		public static Identity<NotificationRecord, Integer> IDENTITY_NOTIFICATION = createIdentity(Notification.NOTIFICATION, Notification.NOTIFICATION.ID_NOTIFICATION);
		public static Identity<NotificationReceiverEmailRecord, Integer> IDENTITY_NOTIFICATION_RECEIVER_EMAIL = createIdentity(NotificationReceiverEmail.NOTIFICATION_RECEIVER_EMAIL, NotificationReceiverEmail.NOTIFICATION_RECEIVER_EMAIL.ID_NOTIFICATION_RECEIVER_EMAIL);
		public static Identity<NotificationTokenRecord, Integer> IDENTITY_NOTIFICATION_TOKEN = createIdentity(NotificationToken.NOTIFICATION_TOKEN, NotificationToken.NOTIFICATION_TOKEN.ID_NOTIFICATION_TOKEN);
		public static Identity<RatingRecord, Integer> IDENTITY_RATING = createIdentity(Rating.RATING, Rating.RATING.ID_RATING);
		public static Identity<RatingConstraintRecord, Integer> IDENTITY_RATING_CONSTRAINT = createIdentity(RatingConstraint.RATING_CONSTRAINT, RatingConstraint.RATING_CONSTRAINT.ID_RATING_CONSTRAINTS);
		public static Identity<RatingOptionExperimentRecord, Integer> IDENTITY_RATING_OPTION_EXPERIMENT = createIdentity(RatingOptionExperiment.RATING_OPTION_EXPERIMENT, RatingOptionExperiment.RATING_OPTION_EXPERIMENT.ID_RATING_OPTION_EXPERIMENT);
		public static Identity<RatingOptionTemplateRecord, Integer> IDENTITY_RATING_OPTION_TEMPLATE = createIdentity(RatingOptionTemplate.RATING_OPTION_TEMPLATE, RatingOptionTemplate.RATING_OPTION_TEMPLATE.ID_RATING_OPTIONS_TEMPLATE);
		public static Identity<TagRecord, Integer> IDENTITY_TAG = createIdentity(Tag.TAG, Tag.TAG.ID_TAG);
		public static Identity<TemplateRecord, Integer> IDENTITY_TEMPLATE = createIdentity(Template.TEMPLATE, Template.TEMPLATE.ID_TEMPLATE);
		public static Identity<TemplateConstraintRecord, Integer> IDENTITY_TEMPLATE_CONSTRAINT = createIdentity(TemplateConstraint.TEMPLATE_CONSTRAINT, TemplateConstraint.TEMPLATE_CONSTRAINT.ID_TEAMPLATE_CONSTRAINT);
		public static Identity<TemplateTagRecord, Integer> IDENTITY_TEMPLATE_TAG = createIdentity(TemplateTag.TEMPLATE_TAG, TemplateTag.TEMPLATE_TAG.ID_TEMPLATE_TAG);
		public static Identity<WorkerRecord, Integer> IDENTITY_WORKER = createIdentity(Worker.WORKER, Worker.WORKER.ID_WORKER);
		public static Identity<WorkerBalanceRecord, Integer> IDENTITY_WORKER_BALANCE = createIdentity(WorkerBalance.WORKER_BALANCE, WorkerBalance.WORKER_BALANCE.ID_WORKER_BALANCE);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AlgorithmAnswerQualityRecord> KEY_ALGORITHM_ANSWER_QUALITY_PRIMARY = createUniqueKey(AlgorithmAnswerQuality.ALGORITHM_ANSWER_QUALITY, AlgorithmAnswerQuality.ALGORITHM_ANSWER_QUALITY.ID_ALGORITHM_ANSWER_QUALITY);
		public static final UniqueKey<AlgorithmAnswerQualityParamRecord> KEY_ALGORITHM_ANSWER_QUALITY_PARAM_PRIMARY = createUniqueKey(AlgorithmAnswerQualityParam.ALGORITHM_ANSWER_QUALITY_PARAM, AlgorithmAnswerQualityParam.ALGORITHM_ANSWER_QUALITY_PARAM.ID_ALGORITHM_ANSWER_QUALITY_PARAM);
		public static final UniqueKey<AlgorithmRatingQualityRecord> KEY_ALGORITHM_RATING_QUALITY_PRIMARY = createUniqueKey(AlgorithmRatingQuality.ALGORITHM_RATING_QUALITY, AlgorithmRatingQuality.ALGORITHM_RATING_QUALITY.ID_ALGORITHM_RATING_QUALITY);
		public static final UniqueKey<AlgorithmRatingQualityParamRecord> KEY_ALGORITHM_RATING_QUALITY_PARAM_PRIMARY = createUniqueKey(AlgorithmRatingQualityParam.ALGORITHM_RATING_QUALITY_PARAM, AlgorithmRatingQualityParam.ALGORITHM_RATING_QUALITY_PARAM.ID_ALGORITHM_RATING_QUALITY_PARAM);
		public static final UniqueKey<AlgorithmTaskChooserRecord> KEY_ALGORITHM_TASK_CHOOSER_PRIMARY = createUniqueKey(AlgorithmTaskChooser.ALGORITHM_TASK_CHOOSER, AlgorithmTaskChooser.ALGORITHM_TASK_CHOOSER.ID_TASK_CHOOSER);
		public static final UniqueKey<AlgorithmTaskChooserParamRecord> KEY_ALGORITHM_TASK_CHOOSER_PARAM_PRIMARY = createUniqueKey(AlgorithmTaskChooserParam.ALGORITHM_TASK_CHOOSER_PARAM, AlgorithmTaskChooserParam.ALGORITHM_TASK_CHOOSER_PARAM.ID_ALGORITHM_TASK_CHOOSER_PARAM);
		public static final UniqueKey<AnswerRecord> KEY_ANSWER_PRIMARY = createUniqueKey(Answer.ANSWER, Answer.ANSWER.ID_ANSWER);
		public static final UniqueKey<AnswerReservationRecord> KEY_ANSWER_RESERVATION_PRIMARY = createUniqueKey(AnswerReservation.ANSWER_RESERVATION, AnswerReservation.ANSWER_RESERVATION.IDANSWER_RESERVATION);
		public static final UniqueKey<CalibrationRecord> KEY_CALIBRATION_PRIMARY = createUniqueKey(Calibration.CALIBRATION, Calibration.CALIBRATION.ID_CALIBRATION);
		public static final UniqueKey<CalibrationRecord> KEY_CALIBRATION_EXPERIMENT_UNIQUE = createUniqueKey(Calibration.CALIBRATION, Calibration.CALIBRATION.EXPERIMENT);
		public static final UniqueKey<CalibrationAnswerOptionRecord> KEY_CALIBRATION_ANSWER_OPTION_PRIMARY = createUniqueKey(CalibrationAnswerOption.CALIBRATION_ANSWER_OPTION, CalibrationAnswerOption.CALIBRATION_ANSWER_OPTION.ID_CALIBRATION_ANSWER_OPTION);
		public static final UniqueKey<CalibrationResultRecord> KEY_CALIBRATION_RESULT_PRIMARY = createUniqueKey(CalibrationResult.CALIBRATION_RESULT, CalibrationResult.CALIBRATION_RESULT.ID_CALIBRATION_RESULT);
		public static final UniqueKey<ChosenAnswerQualityParamRecord> KEY_CHOSEN_ANSWER_QUALITY_PARAM_PRIMARY = createUniqueKey(ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM, ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM.ID_ALGORITHM_ANSWER_QUALITY_PARAM_CHOSEN);
		public static final UniqueKey<ChosenRatingQualityParamRecord> KEY_CHOSEN_RATING_QUALITY_PARAM_PRIMARY = createUniqueKey(ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM, ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM.ID_ALGORITHM_RATING_QUALITY_CHOSEN);
		public static final UniqueKey<ChosenTaskChooserParamRecord> KEY_CHOSEN_TASK_CHOOSER_PARAM_PRIMARY = createUniqueKey(ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM, ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM.ID_CHOOSEN_TASK_CHOOSER_PARAM);
		public static final UniqueKey<ConstraintRecord> KEY_CONSTRAINT_PRIMARY = createUniqueKey(Constraint.CONSTRAINT, Constraint.CONSTRAINT.ID_CONSTRAINT);
		public static final UniqueKey<DatabaseVersionRecord> KEY_DATABASE_VERSION_PRIMARY = createUniqueKey(DatabaseVersion.DATABASE_VERSION, DatabaseVersion.DATABASE_VERSION.IDDATABASE_VERSION);
		public static final UniqueKey<ExperimentRecord> KEY_EXPERIMENT_PRIMARY = createUniqueKey(Experiment.EXPERIMENT, Experiment.EXPERIMENT.ID_EXPERIMENT);
		public static final UniqueKey<ExperimentsCalibrationRecord> KEY_EXPERIMENTS_CALIBRATION_PRIMARY = createUniqueKey(ExperimentsCalibration.EXPERIMENTS_CALIBRATION, ExperimentsCalibration.EXPERIMENTS_CALIBRATION.ID_EXPERIMENTS_CALIBRATION);
		public static final UniqueKey<ExperimentsPlatformRecord> KEY_EXPERIMENTS_PLATFORM_PRIMARY = createUniqueKey(ExperimentsPlatform.EXPERIMENTS_PLATFORM, ExperimentsPlatform.EXPERIMENTS_PLATFORM.IDEXPERIMENTS_PLATFORMS);
		public static final UniqueKey<ExperimentsPlatformModeRecord> KEY_EXPERIMENTS_PLATFORM_MODE_PRIMARY = createUniqueKey(ExperimentsPlatformMode.EXPERIMENTS_PLATFORM_MODE, ExperimentsPlatformMode.EXPERIMENTS_PLATFORM_MODE.IDEXPERIMENTS_PLATFORM_STOPGAP);
		public static final UniqueKey<ExperimentsPlatformStatusRecord> KEY_EXPERIMENTS_PLATFORM_STATUS_PRIMARY = createUniqueKey(ExperimentsPlatformStatus.EXPERIMENTS_PLATFORM_STATUS, ExperimentsPlatformStatus.EXPERIMENTS_PLATFORM_STATUS.IDEXPERIMENTS_PLATFORM_STATUS);
		public static final UniqueKey<GiftCodeRecord> KEY_GIFT_CODE_PRIMARY = createUniqueKey(GiftCode.GIFT_CODE, GiftCode.GIFT_CODE.ID_GIFT_CODE);
		public static final UniqueKey<NotificationRecord> KEY_NOTIFICATION_PRIMARY = createUniqueKey(Notification.NOTIFICATION, Notification.NOTIFICATION.ID_NOTIFICATION);
		public static final UniqueKey<NotificationReceiverEmailRecord> KEY_NOTIFICATION_RECEIVER_EMAIL_PRIMARY = createUniqueKey(NotificationReceiverEmail.NOTIFICATION_RECEIVER_EMAIL, NotificationReceiverEmail.NOTIFICATION_RECEIVER_EMAIL.ID_NOTIFICATION_RECEIVER_EMAIL);
		public static final UniqueKey<NotificationTokenRecord> KEY_NOTIFICATION_TOKEN_PRIMARY = createUniqueKey(NotificationToken.NOTIFICATION_TOKEN, NotificationToken.NOTIFICATION_TOKEN.ID_NOTIFICATION_TOKEN);
		public static final UniqueKey<PlatformRecord> KEY_PLATFORM_PRIMARY = createUniqueKey(Platform.PLATFORM, Platform.PLATFORM.ID_PLATFORM);
		public static final UniqueKey<RatingRecord> KEY_RATING_PRIMARY = createUniqueKey(Rating.RATING, Rating.RATING.ID_RATING);
		public static final UniqueKey<RatingConstraintRecord> KEY_RATING_CONSTRAINT_PRIMARY = createUniqueKey(RatingConstraint.RATING_CONSTRAINT, RatingConstraint.RATING_CONSTRAINT.ID_RATING_CONSTRAINTS);
		public static final UniqueKey<RatingOptionExperimentRecord> KEY_RATING_OPTION_EXPERIMENT_PRIMARY = createUniqueKey(RatingOptionExperiment.RATING_OPTION_EXPERIMENT, RatingOptionExperiment.RATING_OPTION_EXPERIMENT.ID_RATING_OPTION_EXPERIMENT);
		public static final UniqueKey<RatingOptionTemplateRecord> KEY_RATING_OPTION_TEMPLATE_PRIMARY = createUniqueKey(RatingOptionTemplate.RATING_OPTION_TEMPLATE, RatingOptionTemplate.RATING_OPTION_TEMPLATE.ID_RATING_OPTIONS_TEMPLATE);
		public static final UniqueKey<RatingReservationRecord> KEY_RATING_RESERVATION_PRIMARY = createUniqueKey(RatingReservation.RATING_RESERVATION, RatingReservation.RATING_RESERVATION.IDRESERVERD_RATING);
		public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = createUniqueKey(Tag.TAG, Tag.TAG.ID_TAG);
		public static final UniqueKey<TemplateRecord> KEY_TEMPLATE_PRIMARY = createUniqueKey(Template.TEMPLATE, Template.TEMPLATE.ID_TEMPLATE);
		public static final UniqueKey<TemplateConstraintRecord> KEY_TEMPLATE_CONSTRAINT_PRIMARY = createUniqueKey(TemplateConstraint.TEMPLATE_CONSTRAINT, TemplateConstraint.TEMPLATE_CONSTRAINT.ID_TEAMPLATE_CONSTRAINT);
		public static final UniqueKey<TemplateTagRecord> KEY_TEMPLATE_TAG_PRIMARY = createUniqueKey(TemplateTag.TEMPLATE_TAG, TemplateTag.TEMPLATE_TAG.ID_TEMPLATE_TAG);
		public static final UniqueKey<WorkerRecord> KEY_WORKER_PRIMARY = createUniqueKey(Worker.WORKER, Worker.WORKER.ID_WORKER);
		public static final UniqueKey<WorkerBalanceRecord> KEY_WORKER_BALANCE_PRIMARY = createUniqueKey(WorkerBalance.WORKER_BALANCE, WorkerBalance.WORKER_BALANCE.ID_WORKER_BALANCE);
		public static final UniqueKey<WorkerTokenRecord> KEY_WORKER_TOKEN_PRIMARY = createUniqueKey(WorkerToken.WORKER_TOKEN, WorkerToken.WORKER_TOKEN.TOKEN);
		public static final UniqueKey<WorkerTokenRecord> KEY_WORKER_TOKEN_TOKEN_UNIQUE = createUniqueKey(WorkerToken.WORKER_TOKEN, WorkerToken.WORKER_TOKEN.TOKEN);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<AlgorithmAnswerQualityParamRecord, AlgorithmAnswerQualityRecord> REFERENCEDANSWERQUALITY = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_ANSWER_QUALITY_PRIMARY, AlgorithmAnswerQualityParam.ALGORITHM_ANSWER_QUALITY_PARAM, AlgorithmAnswerQualityParam.ALGORITHM_ANSWER_QUALITY_PARAM.ALGORITHM);
		public static final ForeignKey<AlgorithmRatingQualityParamRecord, AlgorithmRatingQualityRecord> REGERENCEDRATINQUALITY = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_RATING_QUALITY_PRIMARY, AlgorithmRatingQualityParam.ALGORITHM_RATING_QUALITY_PARAM, AlgorithmRatingQualityParam.ALGORITHM_RATING_QUALITY_PARAM.ALGORITHM);
		public static final ForeignKey<AlgorithmTaskChooserParamRecord, AlgorithmTaskChooserRecord> REFERENCEDTASKCHOOSER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_TASK_CHOOSER_PRIMARY, AlgorithmTaskChooserParam.ALGORITHM_TASK_CHOOSER_PARAM, AlgorithmTaskChooserParam.ALGORITHM_TASK_CHOOSER_PARAM.ALGORITHM);
		public static final ForeignKey<AnswerRecord, ExperimentRecord> IDEXPERIMENTANSWERS = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, Answer.ANSWER, Answer.ANSWER.EXPERIMENT);
		public static final ForeignKey<AnswerRecord, WorkerRecord> WORKERANSWERED = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, Answer.ANSWER, Answer.ANSWER.WORKER_ID);
		public static final ForeignKey<AnswerRecord, AnswerReservationRecord> RESERVATION_ANSWER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ANSWER_RESERVATION_PRIMARY, Answer.ANSWER, Answer.ANSWER.RESERVATION);
		public static final ForeignKey<AnswerReservationRecord, WorkerRecord> WORKER_WIL_ANSWER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, AnswerReservation.ANSWER_RESERVATION, AnswerReservation.ANSWER_RESERVATION.WORKER);
		public static final ForeignKey<AnswerReservationRecord, ExperimentRecord> EXPERIMENT_WILL_BE_ANSWERED = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, AnswerReservation.ANSWER_RESERVATION, AnswerReservation.ANSWER_RESERVATION.EXPERIMENT);
		public static final ForeignKey<CalibrationRecord, ExperimentRecord> PARTICIPATEDIN = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, Calibration.CALIBRATION, Calibration.CALIBRATION.EXPERIMENT);
		public static final ForeignKey<CalibrationAnswerOptionRecord, CalibrationRecord> CALIBRATIONANSWER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_CALIBRATION_PRIMARY, CalibrationAnswerOption.CALIBRATION_ANSWER_OPTION, CalibrationAnswerOption.CALIBRATION_ANSWER_OPTION.CALIBRATION);
		public static final ForeignKey<CalibrationResultRecord, WorkerRecord> REFERENCEDWORKER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, CalibrationResult.CALIBRATION_RESULT, CalibrationResult.CALIBRATION_RESULT.WORKER);
		public static final ForeignKey<CalibrationResultRecord, CalibrationAnswerOptionRecord> CHOSENANSWER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_CALIBRATION_ANSWER_OPTION_PRIMARY, CalibrationResult.CALIBRATION_RESULT, CalibrationResult.CALIBRATION_RESULT.ANSWER);
		public static final ForeignKey<ChosenAnswerQualityParamRecord, ExperimentRecord> ANSWERQUALITYPARAMREFEXPERIMENT = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM, ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM.EXPERIMENT);
		public static final ForeignKey<ChosenAnswerQualityParamRecord, AlgorithmAnswerQualityParamRecord> CHOSENANSWERQUALITYPARAM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_ANSWER_QUALITY_PARAM_PRIMARY, ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM, ChosenAnswerQualityParam.CHOSEN_ANSWER_QUALITY_PARAM.PARAM);
		public static final ForeignKey<ChosenRatingQualityParamRecord, ExperimentRecord> CHOSENRATINGQUALITYPARAMREFEXPERIMENT = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM, ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM.EXPERIMENT);
		public static final ForeignKey<ChosenRatingQualityParamRecord, AlgorithmRatingQualityParamRecord> CHOSENRATINGQUALITYPARAM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_RATING_QUALITY_PARAM_PRIMARY, ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM, ChosenRatingQualityParam.CHOSEN_RATING_QUALITY_PARAM.PARAM);
		public static final ForeignKey<ChosenTaskChooserParamRecord, ExperimentRecord> TASKCHOOSERPARAMREFEXPERIMENT = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM, ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM.EXPERIMENT);
		public static final ForeignKey<ChosenTaskChooserParamRecord, AlgorithmTaskChooserParamRecord> CHOOSENTASKCHOOSERPARAM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_TASK_CHOOSER_PARAM_PRIMARY, ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM, ChosenTaskChooserParam.CHOSEN_TASK_CHOOSER_PARAM.PARAM);
		public static final ForeignKey<ConstraintRecord, ExperimentRecord> CONSTRAINEDEXPERIMENT = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, Constraint.CONSTRAINT, Constraint.CONSTRAINT.EXPERIMENT);
		public static final ForeignKey<ExperimentRecord, AlgorithmTaskChooserRecord> USEDTASKCHOOSER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_TASK_CHOOSER_PRIMARY, Experiment.EXPERIMENT, Experiment.EXPERIMENT.ALGORITHM_TASK_CHOOSER);
		public static final ForeignKey<ExperimentRecord, AlgorithmAnswerQualityRecord> USEDANSWERQUALITY = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_ANSWER_QUALITY_PRIMARY, Experiment.EXPERIMENT, Experiment.EXPERIMENT.ALGORITHM_QUALITY_ANSWER);
		public static final ForeignKey<ExperimentRecord, AlgorithmRatingQualityRecord> USEDRATINGQUALITY = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ALGORITHM_RATING_QUALITY_PRIMARY, Experiment.EXPERIMENT, Experiment.EXPERIMENT.ALGORITHM_QUALITY_RATING);
		public static final ForeignKey<ExperimentRecord, TemplateRecord> USEDTEMPLATE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_TEMPLATE_PRIMARY, Experiment.EXPERIMENT, Experiment.EXPERIMENT.TEMPLATE);
		public static final ForeignKey<ExperimentsCalibrationRecord, ExperimentsPlatformRecord> REFERENCED_EXPERIMENTS_PLATFORM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENTS_PLATFORM_PRIMARY, ExperimentsCalibration.EXPERIMENTS_CALIBRATION, ExperimentsCalibration.EXPERIMENTS_CALIBRATION.EXPERIMENTS_PLATFORM);
		public static final ForeignKey<ExperimentsCalibrationRecord, CalibrationAnswerOptionRecord> REFERENCED_ANSWER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_CALIBRATION_ANSWER_OPTION_PRIMARY, ExperimentsCalibration.EXPERIMENTS_CALIBRATION, ExperimentsCalibration.EXPERIMENTS_CALIBRATION.ANSWER);
		public static final ForeignKey<ExperimentsPlatformRecord, ExperimentRecord> PLATFORM_USER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, ExperimentsPlatform.EXPERIMENTS_PLATFORM, ExperimentsPlatform.EXPERIMENTS_PLATFORM.EXPERIMENT);
		public static final ForeignKey<ExperimentsPlatformRecord, PlatformRecord> ACTIVE_PLATFORM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_PLATFORM_PRIMARY, ExperimentsPlatform.EXPERIMENTS_PLATFORM, ExperimentsPlatform.EXPERIMENTS_PLATFORM.PLATFORM);
		public static final ForeignKey<ExperimentsPlatformModeRecord, ExperimentsPlatformRecord> MODE_FOR_PLATFORM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENTS_PLATFORM_PRIMARY, ExperimentsPlatformMode.EXPERIMENTS_PLATFORM_MODE, ExperimentsPlatformMode.EXPERIMENTS_PLATFORM_MODE.EXPERIMENTS_PLATFORM);
		public static final ForeignKey<ExperimentsPlatformStatusRecord, ExperimentsPlatformRecord> STATUS_FOR_PLATFORM = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENTS_PLATFORM_PRIMARY, ExperimentsPlatformStatus.EXPERIMENTS_PLATFORM_STATUS, ExperimentsPlatformStatus.EXPERIMENTS_PLATFORM_STATUS.PLATFORM);
		public static final ForeignKey<NotificationReceiverEmailRecord, NotificationRecord> REFERENCED_NOTIFICATION = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_NOTIFICATION_PRIMARY, NotificationReceiverEmail.NOTIFICATION_RECEIVER_EMAIL, NotificationReceiverEmail.NOTIFICATION_RECEIVER_EMAIL.NOTIFICATION);
		public static final ForeignKey<NotificationTokenRecord, NotificationRecord> BELONGING_NOTIFICATION = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_NOTIFICATION_PRIMARY, NotificationToken.NOTIFICATION_TOKEN, NotificationToken.NOTIFICATION_TOKEN.NOTIFICATION);
		public static final ForeignKey<RatingRecord, ExperimentRecord> IDEXPERIMENTRATING = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, Rating.RATING, Rating.RATING.EXPERIMENT);
		public static final ForeignKey<RatingRecord, AnswerRecord> IDANSWERSRATINGS = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ANSWER_PRIMARY, Rating.RATING, Rating.RATING.ANSWER_R);
		public static final ForeignKey<RatingRecord, RatingReservationRecord> RESERVATION_RATING = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_RATING_RESERVATION_PRIMARY, Rating.RATING, Rating.RATING.RESERVATION);
		public static final ForeignKey<RatingRecord, WorkerRecord> WORKERRATED = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, Rating.RATING, Rating.RATING.WORKER_ID);
		public static final ForeignKey<RatingConstraintRecord, RatingRecord> REFERENCED_RATING = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_RATING_PRIMARY, RatingConstraint.RATING_CONSTRAINT, RatingConstraint.RATING_CONSTRAINT.REF_RATING);
		public static final ForeignKey<RatingConstraintRecord, ConstraintRecord> ROFFENDED_CONSTRAINT = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_CONSTRAINT_PRIMARY, RatingConstraint.RATING_CONSTRAINT, RatingConstraint.RATING_CONSTRAINT.OFF_CONSTRAINT);
		public static final ForeignKey<RatingOptionExperimentRecord, ExperimentRecord> RATING_OPTIONS_EXPERIMENT_REFERENCE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, RatingOptionExperiment.RATING_OPTION_EXPERIMENT, RatingOptionExperiment.RATING_OPTION_EXPERIMENT.EXPERIMENT);
		public static final ForeignKey<RatingOptionTemplateRecord, TemplateRecord> REFERENCED_TEMPLATE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_TEMPLATE_PRIMARY, RatingOptionTemplate.RATING_OPTION_TEMPLATE, RatingOptionTemplate.RATING_OPTION_TEMPLATE.TEMPLATE);
		public static final ForeignKey<RatingReservationRecord, WorkerRecord> WORKER_WILL_RATE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, RatingReservation.RATING_RESERVATION, RatingReservation.RATING_RESERVATION.WORKER);
		public static final ForeignKey<RatingReservationRecord, ExperimentRecord> EXPERIMENT_WILL_RATED_ON = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, RatingReservation.RATING_RESERVATION, RatingReservation.RATING_RESERVATION.EXPERIMENT);
		public static final ForeignKey<RatingReservationRecord, AnswerRecord> RESERVED_ANSWER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_ANSWER_PRIMARY, RatingReservation.RATING_RESERVATION, RatingReservation.RATING_RESERVATION.ANSWER);
		public static final ForeignKey<TagRecord, ExperimentRecord> IDEXPERIMENTTAGS = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_EXPERIMENT_PRIMARY, Tag.TAG, Tag.TAG.EXPERIMENT);
		public static final ForeignKey<TemplateConstraintRecord, TemplateRecord> CONSTRAINED_TEMPLATE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_TEMPLATE_PRIMARY, TemplateConstraint.TEMPLATE_CONSTRAINT, TemplateConstraint.TEMPLATE_CONSTRAINT.TEMPLATE);
		public static final ForeignKey<TemplateTagRecord, TemplateRecord> TAGGED_TEMPLATE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_TEMPLATE_PRIMARY, TemplateTag.TEMPLATE_TAG, TemplateTag.TEMPLATE_TAG.TEMPLATE);
		public static final ForeignKey<WorkerRecord, PlatformRecord> WORKERORIGIN = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_PLATFORM_PRIMARY, Worker.WORKER, Worker.WORKER.PLATFORM);
		public static final ForeignKey<WorkerBalanceRecord, WorkerRecord> TRANSACTION_PARTNER = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, WorkerBalance.WORKER_BALANCE, WorkerBalance.WORKER_BALANCE.WORKER);
		public static final ForeignKey<WorkerBalanceRecord, GiftCodeRecord> USED_GIFT_CODE = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_GIFT_CODE_PRIMARY, WorkerBalance.WORKER_BALANCE, WorkerBalance.WORKER_BALANCE.GIFT_CODE);
		public static final ForeignKey<WorkerTokenRecord, WorkerRecord> TOKEN_FOR_UD = createForeignKey(edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys.KEY_WORKER_PRIMARY, WorkerToken.WORKER_TOKEN, WorkerToken.WORKER_TOKEN.WORKER_ID);
	}
}
