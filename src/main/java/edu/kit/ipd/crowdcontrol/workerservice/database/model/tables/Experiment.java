/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.workerservice.database.model.tables;


import edu.kit.ipd.crowdcontrol.workerservice.database.model.Crowdcontrol;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.ExperimentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experiment extends TableImpl<ExperimentRecord> {

	private static final long serialVersionUID = 789988422;

	/**
	 * The reference instance of <code>crowdcontrol.Experiment</code>
	 */
	public static final Experiment EXPERIMENT = new Experiment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ExperimentRecord> getRecordType() {
		return ExperimentRecord.class;
	}

	/**
	 * The column <code>crowdcontrol.Experiment.id_experiment</code>.
	 */
	public final TableField<ExperimentRecord, Integer> ID_EXPERIMENT = createField("id_experiment", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.title</code>.
	 */
	public final TableField<ExperimentRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.description</code>.
	 */
	public final TableField<ExperimentRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.description_raw</code>.
	 */
	public final TableField<ExperimentRecord, String> DESCRIPTION_RAW = createField("description_raw", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.needed_answers</code>.
	 */
	public final TableField<ExperimentRecord, Integer> NEEDED_ANSWERS = createField("needed_answers", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.ratings_per_answer</code>.
	 */
	public final TableField<ExperimentRecord, Integer> RATINGS_PER_ANSWER = createField("ratings_per_answer", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.anwers_per_worker</code>.
	 */
	public final TableField<ExperimentRecord, Integer> ANWERS_PER_WORKER = createField("anwers_per_worker", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.ratings_per_worker</code>.
	 */
	public final TableField<ExperimentRecord, Integer> RATINGS_PER_WORKER = createField("ratings_per_worker", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.answer_type</code>.
	 */
	public final TableField<ExperimentRecord, String> ANSWER_TYPE = createField("answer_type", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.algorithm_task_chooser</code>.
	 */
	public final TableField<ExperimentRecord, String> ALGORITHM_TASK_CHOOSER = createField("algorithm_task_chooser", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.algorithm_quality_answer</code>.
	 */
	public final TableField<ExperimentRecord, String> ALGORITHM_QUALITY_ANSWER = createField("algorithm_quality_answer", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.algorithm_quality_rating</code>.
	 */
	public final TableField<ExperimentRecord, String> ALGORITHM_QUALITY_RATING = createField("algorithm_quality_rating", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.base_payment</code>.
	 */
	public final TableField<ExperimentRecord, Integer> BASE_PAYMENT = createField("base_payment", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.bonus_answer</code>.
	 */
	public final TableField<ExperimentRecord, Integer> BONUS_ANSWER = createField("bonus_answer", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.bonus_rating</code>.
	 */
	public final TableField<ExperimentRecord, Integer> BONUS_RATING = createField("bonus_rating", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.template_data</code>.
	 */
	public final TableField<ExperimentRecord, String> TEMPLATE_DATA = createField("template_data", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.template</code>.
	 */
	public final TableField<ExperimentRecord, Integer> TEMPLATE = createField("template", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.worker_quality_threshold</code>.
	 */
	public final TableField<ExperimentRecord, Integer> WORKER_QUALITY_THRESHOLD = createField("worker_quality_threshold", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>crowdcontrol.Experiment.payment_quality_threshold</code>.
	 */
	public final TableField<ExperimentRecord, Integer> PAYMENT_QUALITY_THRESHOLD = createField("payment_quality_threshold", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>crowdcontrol.Experiment</code> table reference
	 */
	public Experiment() {
		this("Experiment", null);
	}

	/**
	 * Create an aliased <code>crowdcontrol.Experiment</code> table reference
	 */
	public Experiment(String alias) {
		this(alias, EXPERIMENT);
	}

	private Experiment(String alias, Table<ExperimentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Experiment(String alias, Table<ExperimentRecord> aliased, Field<?>[] parameters) {
		super(alias, Crowdcontrol.CROWDCONTROL, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ExperimentRecord, Integer> getIdentity() {
		return Keys.IDENTITY_EXPERIMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ExperimentRecord> getPrimaryKey() {
		return Keys.KEY_EXPERIMENT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ExperimentRecord>> getKeys() {
		return Arrays.<UniqueKey<ExperimentRecord>>asList(Keys.KEY_EXPERIMENT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ExperimentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ExperimentRecord, ?>>asList(Keys.USEDTASKCHOOSER, Keys.USEDANSWERQUALITY, Keys.USEDRATINGQUALITY, Keys.USEDTEMPLATE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Experiment as(String alias) {
		return new Experiment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Experiment rename(String name) {
		return new Experiment(name, null);
	}
}
