/**
 * This class is generated by jOOQ
 */
package edu.kit.ipd.crowdcontrol.workerservice.database.model.tables;


import com.google.gson.JsonElement;

import edu.kit.ipd.crowdcontrol.workerservice.database.bindings.JSONGsonBinding;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.Crowdcontrol;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.Keys;
import edu.kit.ipd.crowdcontrol.workerservice.database.model.tables.records.WorkerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Worker extends TableImpl<WorkerRecord> {

	private static final long serialVersionUID = -477486378;

	/**
	 * The reference instance of <code>crowdcontrol.Worker</code>
	 */
	public static final Worker WORKER = new Worker();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<WorkerRecord> getRecordType() {
		return WorkerRecord.class;
	}

	/**
	 * The column <code>crowdcontrol.Worker.id_worker</code>.
	 */
	public final TableField<WorkerRecord, Integer> ID_WORKER = createField("id_worker", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Worker.platform_data</code>.
	 */
	public final TableField<WorkerRecord, JsonElement> PLATFORM_DATA = createField("platform_data", org.jooq.impl.DefaultDataType.getDefaultDataType("json"), this, "", new JSONGsonBinding());

	/**
	 * The column <code>crowdcontrol.Worker.platform</code>.
	 */
	public final TableField<WorkerRecord, String> PLATFORM = createField("platform", org.jooq.impl.SQLDataType.VARCHAR.length(191).nullable(false), this, "");

	/**
	 * The column <code>crowdcontrol.Worker.email</code>.
	 */
	public final TableField<WorkerRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * The column <code>crowdcontrol.Worker.quality</code>.
	 */
	public final TableField<WorkerRecord, Integer> QUALITY = createField("quality", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>crowdcontrol.Worker.identification</code>.
	 */
	public final TableField<WorkerRecord, String> IDENTIFICATION = createField("identification", org.jooq.impl.SQLDataType.VARCHAR.length(191), this, "");

	/**
	 * Create a <code>crowdcontrol.Worker</code> table reference
	 */
	public Worker() {
		this("Worker", null);
	}

	/**
	 * Create an aliased <code>crowdcontrol.Worker</code> table reference
	 */
	public Worker(String alias) {
		this(alias, WORKER);
	}

	private Worker(String alias, Table<WorkerRecord> aliased) {
		this(alias, aliased, null);
	}

	private Worker(String alias, Table<WorkerRecord> aliased, Field<?>[] parameters) {
		super(alias, Crowdcontrol.CROWDCONTROL, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<WorkerRecord, Integer> getIdentity() {
		return Keys.IDENTITY_WORKER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<WorkerRecord> getPrimaryKey() {
		return Keys.KEY_WORKER_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<WorkerRecord>> getKeys() {
		return Arrays.<UniqueKey<WorkerRecord>>asList(Keys.KEY_WORKER_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<WorkerRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<WorkerRecord, ?>>asList(Keys.WORKERORIGIN);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Worker as(String alias) {
		return new Worker(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Worker rename(String name) {
		return new Worker(name, null);
	}
}
