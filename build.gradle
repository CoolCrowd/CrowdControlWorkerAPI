group 'CoolCrowd'
version '0.5-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'nu.studer.jooq'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'mysql:mysql-connector-java:5.+'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
        classpath "net.saliman:gradle-cobertura-plugin:2.3.+"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.+"
    }
}

sourceCompatibility = 1.8


repositories {
    mavenCentral()
}

dependencies {
    compile 'org.jooq:jooq:3.+'
    compile 'org.jooq:jooq-meta:3.+'
    compile 'org.jooq:jool:0.9.+'
    compile 'mysql:mysql-connector-java:5.+'
    compile 'org.mybatis:mybatis:3.+'
    compile 'com.mchange:c3p0:0.9.5.2'
    compile 'com.sparkjava:spark-core:2.3'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.google.protobuf:protobuf-java:3.+'
    compile 'com.google.protobuf:protobuf-java-util:3.+'
    compile 'commons-validator:commons-validator:1.5.0'
    compile 'com.mashape.unirest:unirest-java:1.4.7'
    compile 'org.apache.commons:commons-io:1.3.+'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'commons-io:commons-io:2.+'
}

//tests

test {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

test.dependsOn integrationTest

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['edu/kit/ipd/crowdcontrol/objectservice/proto/**',
                              'edu/kit/ipd/crowdcontrol/workerservice/proto/**',
                              'edu/kit/ipd/crowdcontrol/workerservice/database/model/**'])
        })
    }
}


//database-model
jooq {
    sample(sourceSets.main) {
        jdbc {
            url = 'jdbc:mysql://localhost:8888'
            driver = 'com.mysql.jdbc.Driver'
            user = 'LeanderK'
            password = ''
            schema = 'crowdcontrol'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'crowdcontrol'
            }
            generate {
                daos = true
            }
            target {
                packageName = "edu.kit.ipd.crowdcontrol.workerservice.database.model"
                directory = 'src/main/java'
            }
        }
    }
}

generateSampleJooqSchemaSource.enabled = false
